class school {
 constructor(name, level, numberOfStudent){
this._name = name;
    this._level = level;
    this._numberOfStudent = numberOfStudent;
 }
 get name() {
    return this._level;
  }
get numberOfStudents(){
    return this._numberOfStudents;
  }
  set numberOfStudents(newNumberOfStudents){
    if(isNaN(newNumberOfStudents)){
    	console.log('Invalid input: numberOfStudents must be set to a Number.');
    }
    else{
        return this._numberOfStudents = newNumberOfStudents;
    }
  }
  quickSacts() {
  console.log(`You can interpolate a property like this: ${this._name}.`);
}
static pickSubstituteTeacher(substituteTeachers) {
    substituteTeachers = [];
    let randomNumber = Math.floor(Math.random() * substituteTeachers.length);
    
    return substituteTeachers[randomNumber];
  }
};

class Primary extends School { 
 constructor(name, level, numberOfStudents,pickupPolicy){
    super(name, 'Primary');
    this._pickupPolicy = pickupPolicy;
    this.numberOfStudents = numberOfStudents; 
  }
  get pickupPolicy(){
    return this._pickupPolicy;
  }
};

class Middle extends School {
  constructor(name, level, numberOfStudents){
    super(name, 'Middle', numberOfStudents);
  }
}

class High extends School {
  constructor(name, numberOfStudents, sportsTeams){
    super(name, 'High', numberOfStudents);
    this._sportsTeams = sportsTeams;
  }
  
  get sportsTeams(){
    return this._sportsTeams;
  }
}


const lorraineHansbury = new Primary('Lorraine Hansbury', 514, 'Students must be picked up by a parent, guardian, or a family member over the age of 13.');

console.log(lorraineHansbury);



